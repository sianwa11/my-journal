// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package database

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tags (name)
VALUES (?)
RETURNING id, name, created_at
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT id, name, created_at FROM tags ORDER BY created_at
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTags = `-- name: SearchTags :many
SELECT id, name as value FROM tags
WHERE name LIKE ?
`

type SearchTagsRow struct {
	ID    int64
	Value string
}

func (q *Queries) SearchTags(ctx context.Context, name string) ([]SearchTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchTags, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchTagsRow
	for rows.Next() {
		var i SearchTagsRow
		if err := rows.Scan(&i.ID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTag = `-- name: SelectTag :one
SELECT id, name, created_at FROM tags
WHERE name = ?
`

func (q *Queries) SelectTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, selectTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}
