// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: journal_entries.sql

package database

import (
	"context"
)

const createJournalEntry = `-- name: CreateJournalEntry :one
INSERT INTO journal_entries (title, content, user_id)
VALUES (?, ?, ?)
RETURNING id, title, content, created_at, updated_at, user_id
`

type CreateJournalEntryParams struct {
	Title   string
	Content string
	UserID  int64
}

func (q *Queries) CreateJournalEntry(ctx context.Context, arg CreateJournalEntryParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, createJournalEntry, arg.Title, arg.Content, arg.UserID)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteJournalEntry = `-- name: DeleteJournalEntry :exec
DELETE FROM journal_entries
WHERE id = ? AND user_id = ?
`

type DeleteJournalEntryParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteJournalEntry(ctx context.Context, arg DeleteJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteJournalEntry, arg.ID, arg.UserID)
	return err
}

const getAllJournalsCount = `-- name: GetAllJournalsCount :one
SELECT COUNT(*) as count FROM journal_entries
`

func (q *Queries) GetAllJournalsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllJournalsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJournalEntry = `-- name: GetJournalEntry :one
SELECT id, title, content, created_at, updated_at, user_id FROM journal_entries
WHERE id = ?
`

func (q *Queries) GetJournalEntry(ctx context.Context, id int64) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getJournalEntry, id)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getJournals = `-- name: GetJournals :many
SELECT id, title, content, created_at, updated_at, user_id FROM journal_entries
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type GetJournalsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetJournals(ctx context.Context, arg GetJournalsParams) ([]JournalEntry, error) {
	rows, err := q.db.QueryContext(ctx, getJournals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JournalEntry
	for rows.Next() {
		var i JournalEntry
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersJournal = `-- name: GetUsersJournal :one
SELECT id, title, content, created_at, updated_at, user_id FROM journal_entries
WHERE id = ? AND user_id = ?
`

type GetUsersJournalParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetUsersJournal(ctx context.Context, arg GetUsersJournalParams) (JournalEntry, error) {
	row := q.db.QueryRowContext(ctx, getUsersJournal, arg.ID, arg.UserID)
	var i JournalEntry
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const updateJournalEntry = `-- name: UpdateJournalEntry :exec
UPDATE journal_entries
set title = ?,
content = ?,
updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateJournalEntryParams struct {
	Title   string
	Content string
	ID      int64
}

func (q *Queries) UpdateJournalEntry(ctx context.Context, arg UpdateJournalEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateJournalEntry, arg.Title, arg.Content, arg.ID)
	return err
}
