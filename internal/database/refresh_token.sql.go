// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, user_id, expires_at) VALUES (?, ?, ?)
RETURNING id, token, user_id, expires_at, created_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    int64
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const getByRefreshToken = `-- name: GetByRefreshToken :one
SELECT user_id
FROM refresh_tokens
WHERE token = ?
`

func (q *Queries) GetByRefreshToken(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getByRefreshToken, token)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
set revoked_at = NOW(),
updated_at = NOW()
WHERE token = ?
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}
