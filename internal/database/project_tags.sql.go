// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_tags.sql

package database

import (
	"context"
)

const createProjectTag = `-- name: CreateProjectTag :one
INSERT INTO project_tags (project_id, tag_id)
VALUES (?, ?)
RETURNING project_id, tag_id
`

type CreateProjectTagParams struct {
	ProjectID int64
	TagID     int64
}

func (q *Queries) CreateProjectTag(ctx context.Context, arg CreateProjectTagParams) (ProjectTag, error) {
	row := q.db.QueryRowContext(ctx, createProjectTag, arg.ProjectID, arg.TagID)
	var i ProjectTag
	err := row.Scan(&i.ProjectID, &i.TagID)
	return i, err
}

const createProjectTagIfNotExists = `-- name: CreateProjectTagIfNotExists :exec
INSERT OR IGNORE INTO project_tags (project_id, tag_id)
VALUES (?, ?)
`

type CreateProjectTagIfNotExistsParams struct {
	ProjectID int64
	TagID     int64
}

func (q *Queries) CreateProjectTagIfNotExists(ctx context.Context, arg CreateProjectTagIfNotExistsParams) error {
	_, err := q.db.ExecContext(ctx, createProjectTagIfNotExists, arg.ProjectID, arg.TagID)
	return err
}

const deleteProjectTag = `-- name: DeleteProjectTag :exec
DELETE FROM project_tags
WHERE project_id = ?
`

func (q *Queries) DeleteProjectTag(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProjectTag, projectID)
	return err
}
